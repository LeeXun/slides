###############################################################################################
* _
```html
<p class="slogan slogan-15 bold">runtime.morestack_noctxt</p>
```htmlend

###############################################################################################
* MoreStack
```html
<pre class="code code18">
<code class="armasm">
// morestack but not preserving ctxt.

TEXT runtime·morestack_noctxt(SB),NOSPLIT,$0
	MOVL	$0, DX
	JMP	runtime·morestack(SB)
</code>
</pre>
```htmlend

###############################################################################################
* Closure
```html
<pre class="code code18">
<code class="go">
func adder() func(int) int {
	sum := 0
	return func(x int) int { <- closure
		sum += x
		return sum
	}
}

func main() {
	pos, neg := adder(), adder()
	for i := 0; i < 10; i++ {
		fmt.Println(
			pos(i),
			neg(-2*i),
		)
	}
}

</code>
</pre>
```htmlend

###############################################################################################
* MoreStack
```html
<pre class="code code18">
<code class="go">
// src/cmd/internal/obj/x86/obj6.go
	// ...
	morestack := "runtime.morestack"
	switch {
	case cursym.CFunc():
		morestack = "runtime.morestackc"
	case !cursym.Func.Text.From.Sym.NeedCtxt():  <- 不是 closure，不需要
		morestack = "runtime.morestack_noctxt"
	}
</code>
</pre>
```htmlend

###############################################################################################
* MoreStack
```html
<pre class="code code18">
<code class="armasm">
TEXT runtime·morestack(SB),NOSPLIT,$0-0
	// Cannot grow scheduler stack (m->g0).
	get_tls(CX)
	MOVQ	g(CX), BX
	MOVQ	g_m(BX), BX
	MOVQ	m_g0(BX), SI
	CMPQ	g(CX), SI <- 是不是 g0
	JNE	3(PC) <- 如果不是 g0 就跳三行 (( 跳過下面兩行
	CALL	runtime·badmorestackg0(SB) <- 在 schedule stack
	CALL	runtime·abort(SB)
	...
	MOVQ	m_g0(BX), BX
	MOVQ	BX, g(CX)
	MOVQ	(g_sched+gobuf_sp)(BX), SP
	CALL	runtime·newstack(SB)    <- newstack!!
	CALL	runtime·abort(SB)	// crash if newstack returns
	RET
</code>
</pre>
```htmlend

###############################################################################################
* NewStack
```html
<pre class="code code18">
<code class="go">
// src/runtime/stack.go
var maxstacksize uintptr = 1 << 20
// ...
func newstack() {
	thisg := getg()
	// TODO: double check all gp. shouldn't be getg().
	// ...
	gp := thisg.m.curg  <- 得讓 m 來記住，不然換新時會消失
	// ...
		// Allocate a bigger segment and move the stack.
	oldsize := gp.stack.hi - gp.stack.lo
	newsize := oldsize * 2  <- 每次長大長兩倍
	if newsize > maxstacksize {
		print("runtime: goroutine stack exceeds ", maxstacksize, "-byte limit\n")
		throw("stack overflow")
	}
</code>
</pre>
```htmlend

###############################################################################################
* NewStack
```html
<pre class="code code18">
<code class="go">
// src/runtime/stack.go
// ...
func newstack() {
	thisg := getg()
	// ...
	gp := thisg.m.curg
	// ...
	preempt := atomic.Loaduintptr(&gp.stackguard0) == stackPreempt
	// ...
		if preempt {
		if thisg.m.locks != 0 || thisg.m.mallocing != 0
		 || thisg.m.preemptoff != "" 
		 || thisg.m.p.ptr().status != _Prunning {
			// Let the goroutine keep running for now.
			// gp->preempt is set, so it will be preempted next time.
			gp.stackguard0 = gp.stack.lo + _StackGuard
			gogo(&gp.sched) // never return
		}
	}
</code>
</pre>
```htmlend

###############################################################################################
* NewStack
```html
<pre class="code code18">
<code class="go">
// src/runtime/stack.go
const (
	uintptrMask = 1<<(8*sys.PtrSize) - 1

	// Goroutine preemption request.
	// Stored into g->stackguard0 to cause split stack check failure.
	// Must be greater than any real sp.
	// 0xfffffade in hex.            <- 剛剛看到的那個
	stackPreempt = uintptrMask & -1314

	// Thread is forking.
	// Stored into g->stackguard0 to cause split stack check failure.
	// Must be greater than any real sp.
	stackFork = uintptrMask & -1234
)
</code>
</pre>
```htmlend

###############################################################################################
* NewStack
```html
<pre class="code code18">
<code class="go">
// src/runtime/stack.go
	if preempt {
		if gp == thisg.m.g0 {
			throw("runtime: preempt g0")
		}
		if thisg.m.p == 0 && thisg.m.locks == 0 {
			throw("runtime: g is running but p is not")
		}
		// Synchronize with scang.
		casgstatus(gp, _Grunning, _Gwaiting)
		// ...
		// Act like goroutine called runtime.Gosched.
		casgstatus(gp, _Gwaiting, _Grunning)
		gopreempt_m(gp) // never return  <- 就算正在跑還是處理一下就給插隊
	}
</code>
</pre>
```htmlend