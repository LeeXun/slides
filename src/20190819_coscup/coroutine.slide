###############################################################################################
* Many to 1
```html
<pre class="code code18">
<code class="armasm">



				+------+
				|kernal|
				+------+
	    +---------------+------||-------+---------------+
	+---+--+	+---+--+	+---+--+	+---+--+
	| user |	| user |	| user |	| user |
	+------+	+------+	+------+	+------+
</code>
</pre>
```htmlend

###############################################################################################
* 1 to 1
```html
<pre class="code code18">
<code class="armasm">



	+------+	+------+	+------+	+------+
	|kernal|	|kernal|	|kernal|	|kernal|
	+------+	+------+	+------+	+------+
	    +---------------+---------------+---------------+
	+------+	+------+	+------+	+------+
	| user |	| user |	| user |	| user |
	+------+	+------+	+------+	+------+
</code>
</pre>
```htmlend

###############################################################################################
* Many to Many
```html
<pre class="code code18">
<code class="armasm">



	+------+		+------+		+------+	
	|kernal|		|kernal|		|kernal| .......
	+------+		+------+		+------+

	+------+	+------+	+------+	+------+
	| user |	| user |	| user |	| user | .......
	+------+	+------+	+------+	+------+
</code>
</pre>
```htmlend

###############################################################################################
* _
```html
<p class="slogan slogan-15 bold">Golang 怎麼做？</p>
```htmlend

###############################################################################################
* _
```html
<p class="slogan slogan-15 bold">Goroutine？Coroutine？</p>
```htmlend

###############################################################################################
* Coroutine
```html
<pre class="code code18">
<code class="c">
// http://blog.linux.org.tw/~jserv/archives/001848.html

static int state = 0;

static void user_thread_1()
{
    state = 0;
    for ( ; ; ) {
        printf("1\n");
        state += 1;
        if (state > 10) {
            return;
        }
    }
}

static void user_thread_2()
{
    state = 0;
    for ( ; ; ) {
        printf("2\n");
        state += 1;
        if (state > 10) {
            return;
        }
    }
}

int main() 
{
  for ( ; ; ) {
    user_thread_1();
    user_thread_2();
  }
  return 0;
}
</code>
</pre>
```htmlend

###############################################################################################
* Goroutine
```html
<pre class="code code18">
<code class="armasm">


	+------+	+------+	+------+	+------+
	| core |	| core |	| core |	| core |
	+------+	+------+	+------+	+------+

	+------+	+------+	+------+	+------+
	|kernal|	|kernal|	|kernal|	|kernal|
	+------+	+------+	+------+	+------+
	    +---------------+---------------+---------------+
	+------+	+------+	+------+	+------+
	| user |	| user |	| user |	| user | <- 同一個 process
	+------+	+------+	+------+	+------+

	G G G G G G G G G G G G G G G G G G G G G G G G G G G G ...
</code>
</pre>
```htmlend

###############################################################################################
* Why many to many?
```html
<ul>
  <li>妥善利用硬體多核心</li>
	<li>減少依賴 OS context switch</li>
  <li>減少和 kernal 溝通成本</li>
  <li>創建 thread 的開銷大</li>
  <li>配合 golang 垃圾回收機制的實作</li>
</ul>
```htmlend

###############################################################################################
* Let's try this
.monaco ./code/goroutine_example/main.go

# 這邊要 demo
#1. 會死
#1. 加上 go 不會死