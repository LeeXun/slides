Process and Thread
Presented by Lee Xun

###############################################################################################
* _
```html
<p class="slogan slogan-10 bold">Multi-process</p>
<p class="slogan slogan bold">Multi-thread？</p>
```htmlend

###############################################################################################
* Process and Thread
```html
<pre class="code code18">
<code class="c">
struct task_struct {
	void				*stack; // kernal stack
	struct thread_info		thread_info; // context switch 要用的資訊
	volatile long			state; /* -1 unrunnable, 0 runnable, >0 stopped: */
	struct mm_struct		*mm; // 指向 virtual memory 區塊
	struct mm_struct		*active_mm; // 有緣再說
	pid_t				pid;
	struct pid			*thread_pid;
	struct list_head		children;
	struct list_head		sibling;
	/* ... */
}

	// https://sourcegraph.com/github.com/torvalds/linux/-/blob/include/linux/sched.h#L634
</code>
</pre>
```htmlend

###############################################################################################
* Process and Thread
```html
<pre class="code code18">
<code class="c">
struct mm_struct {
	unsigned long start_stack; // user stack
	/* ... */
}

	// https://sourcegraph.com/github.com/torvalds/linux/-/blob/include/linux/sched.h#L634
	// https://sourcegraph.com/github.com/torvalds/linux/-/blob/include/linux/mm_types.h#L354
	// https://sourcegraph.com/github.com/torvalds/linux/-/blob/arch/x86/include/asm/processor.h#L440:1
	// https://code.woboq.org/userspace/glibc/sysdeps/unix/sysv/linux/createthread.c.html#103
</code>
</pre>
```htmlend

###############################################################################################
* Process and Thread
```html
<pre class="code code18">
<code class="c">
// https://sourcegraph.com/github.com/torvalds/linux/-/blob/arch/x86/include/asm/processor.h#L440:1
struct thread_struct {
	/* Cached TLS descriptors: */
	struct desc_struct	tls_array[GDT_ENTRY_TLS_ENTRIES];
	unsigned long		sp0; // kernal thread 的 rbp，stack 的尾
	unsigned long		sp; // kernal thread 的 rsp，stack 的頭

</code>
</pre>
```htmlend

###############################################################################################
* Process and Thread
```html
<pre class="code code18">
<code class="c">
// glibc/sysdeps/unix/sysv/linux/createthread.c
// https://code.woboq.org/userspace/glibc/sysdeps/unix/sysv/linux/createthread.c.html#103
  const int clone_flags = (CLONE_VM | CLONE_FS | CLONE_FILES | CLONE_SYSVSEM
                           | CLONE_SIGHAND | CLONE_THREAD
                           | CLONE_SETTLS | CLONE_PARENT_SETTID
                           | CLONE_CHILD_CLEARTID
                           | 0);
  TLS_DEFINE_INIT_TP (tp, pd); // init thread pointer
  if (__glibc_unlikely (ARCH_CLONE (&start_thread, STACK_VARIABLES_ARGS,
                                    clone_flags, pd, &pd->tid, tp, &pd->tid)
                        == -1))
		return errno;

</code>
</pre>
```htmlend